// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client/Proto/IL/Structure.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MonMoose.StaticData {

  /// <summary>Holder for reflection information generated from Client/Proto/IL/Structure.proto</summary>
  public static partial class StructureReflection {

    #region Descriptor
    /// <summary>File descriptor for Client/Proto/IL/Structure.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StructureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9DbGllbnQvUHJvdG8vSUwvU3RydWN0dXJlLnByb3RvEhNNb25Nb29zZS5T",
            "dGF0aWNEYXRhIrYBCg9BY3RvclN0YXRpY0luZm8SCgoCSWQYASABKAUSDAoE",
            "TmFtZRgCIAEoCRIyCgRUeXBlGAMgASgOMiQuTW9uTW9vc2UuU3RhdGljRGF0",
            "YS5FQWN0b3JDbGFzc1R5cGUSEQoJTW92ZVNwZWVkGAQgASgFEg4KBkF0dGFj",
            "axgFIAEoBRIQCghEZWZmZW5jZRgGIAEoBRISCgpQcmVmYWJQYXRoGAcgASgJ",
            "EgwKBFNpemUYCCABKAUiWQoTQXR0cmlidXRlU3RhdGljSW5mbxIKCgJJZBgB",
            "IAEoBRIMCgROYW1lGAIgASgJEhYKDklzU2lnbkludmVyc2VkGAMgASgIEhAK",
            "CEljb25QYXRoGAQgASgJIoIBChZCYXR0bGVHcm91bmRTdGF0aWNJbmZvEgoK",
            "AklkGAEgASgFEhEKCVNjZW5lUGF0aBgCIAEoCRIRCglMZWZ0V2lkdGgYAyAB",
            "KAUSEgoKUmlnaHRXaWR0aBgEIAEoBRIOCgZIZWlnaHQYBSABKAUSEgoKR3Jp",
            "ZElkTGlzdBgGIAMoBSJGChVCYXR0bGVTY2VuZVN0YXRpY0luZm8SCgoCSWQY",
            "ASABKAUSDAoETmFtZRgCIAEoCRITCgtTdGFnZUlkTGlzdBgDIAMoBSLvAQoV",
            "QmF0dGxlU3RhZ2VTdGF0aWNJbmZvEgoKAklkGAEgASgFEgwKBE5hbWUYAiAB",
            "KAkSQwoPU3RhZ2VFbnRpdHlMaXN0GAMgAygLMiouTW9uTW9vc2UuU3RhdGlj",
            "RGF0YS5TdGFnZUVudGl0eVN0YXRpY0luZm8SPQoMRW1iYXR0bGVMaXN0GAQg",
            "AygLMicuTW9uTW9vc2UuU3RhdGljRGF0YS5FbWJhdHRsZVN0YXRpY0luZm8S",
            "EwoLTmVlZFByZXBhcmUYBSABKAgSEAoIR3JvdW5kSWQYBiABKAUSEQoJU2Nl",
            "bmVQYXRoGAcgASgJIjAKFEJhdHRsZVRlYW1TdGF0aWNJbmZvEgoKAklkGAEg",
            "ASgFEgwKBE5hbWUYAiABKAkiRgoXQmF0dGxlVGVycmFpblN0YXRpY0luZm8S",
            "CgoCSWQYASABKAUSDAoETmFtZRgCIAEoCRIRCglXYWxrU3BlZWQYAyABKAUi",
            "SwocQmF0dGxlV2luQ29uZGl0aW9uU3RhdGljSW5mbxIKCgJJZBgBIAEoBRIM",
            "CgROYW1lGAIgASgJEhEKCVBhcmFtSW50MRgDIAEoBSJIChpDb2xsZWN0YWJs",
            "ZUFjdG9yU3RhdGljSW5mbxIKCgJJZBgBIAEoBRIMCgROYW1lGAIgASgJEhAK",
            "CEhlYWRJY29uGAMgASgJImgKEEVudGl0eVN0YXRpY0luZm8SCgoCSWQYASAB",
            "KAUSNAoKRW50aXR5VHlwZRgCIAEoDjIgLk1vbk1vb3NlLlN0YXRpY0RhdGEu",
            "RUVudGl0eVR5cGUSEgoKU3BlY2lmaWNJZBgDIAEoBSIwChRQcmVmYWJQYXRo",
            "U3RhdGljSW5mbxIKCgJJZBgBIAEoBRIMCgRQYXRoGAIgASgJIlwKFVN0YWdl",
            "RW50aXR5U3RhdGljSW5mbxILCgNVaWQYASABKAUSCwoDUmlkGAIgASgFEg0K",
            "BUxldmVsGAMgASgFEgwKBFBvc1gYBCABKAUSDAoEUG9zWRgFIAEoBSJAChJF",
            "bWJhdHRsZVN0YXRpY0luZm8SDgoGVGVhbUlkGAEgASgFEgwKBFBvc1gYAiAB",
            "KAUSDAoEUG9zWRgDIAEoBSJJChNBY3RvclN0YXRpY0luZm9MaXN0EjIKBGxp",
            "c3QYASADKAsyJC5Nb25Nb29zZS5TdGF0aWNEYXRhLkFjdG9yU3RhdGljSW5m",
            "byJRChdBdHRyaWJ1dGVTdGF0aWNJbmZvTGlzdBI2CgRsaXN0GAEgAygLMigu",
            "TW9uTW9vc2UuU3RhdGljRGF0YS5BdHRyaWJ1dGVTdGF0aWNJbmZvIlcKGkJh",
            "dHRsZUdyb3VuZFN0YXRpY0luZm9MaXN0EjkKBGxpc3QYASADKAsyKy5Nb25N",
            "b29zZS5TdGF0aWNEYXRhLkJhdHRsZUdyb3VuZFN0YXRpY0luZm8iVQoZQmF0",
            "dGxlU2NlbmVTdGF0aWNJbmZvTGlzdBI4CgRsaXN0GAEgAygLMiouTW9uTW9v",
            "c2UuU3RhdGljRGF0YS5CYXR0bGVTY2VuZVN0YXRpY0luZm8iVQoZQmF0dGxl",
            "U3RhZ2VTdGF0aWNJbmZvTGlzdBI4CgRsaXN0GAEgAygLMiouTW9uTW9vc2Uu",
            "U3RhdGljRGF0YS5CYXR0bGVTdGFnZVN0YXRpY0luZm8iUwoYQmF0dGxlVGVh",
            "bVN0YXRpY0luZm9MaXN0EjcKBGxpc3QYASADKAsyKS5Nb25Nb29zZS5TdGF0",
            "aWNEYXRhLkJhdHRsZVRlYW1TdGF0aWNJbmZvIlkKG0JhdHRsZVRlcnJhaW5T",
            "dGF0aWNJbmZvTGlzdBI6CgRsaXN0GAEgAygLMiwuTW9uTW9vc2UuU3RhdGlj",
            "RGF0YS5CYXR0bGVUZXJyYWluU3RhdGljSW5mbyJjCiBCYXR0bGVXaW5Db25k",
            "aXRpb25TdGF0aWNJbmZvTGlzdBI/CgRsaXN0GAEgAygLMjEuTW9uTW9vc2Uu",
            "U3RhdGljRGF0YS5CYXR0bGVXaW5Db25kaXRpb25TdGF0aWNJbmZvIl8KHkNv",
            "bGxlY3RhYmxlQWN0b3JTdGF0aWNJbmZvTGlzdBI9CgRsaXN0GAEgAygLMi8u",
            "TW9uTW9vc2UuU3RhdGljRGF0YS5Db2xsZWN0YWJsZUFjdG9yU3RhdGljSW5m",
            "byJLChRFbnRpdHlTdGF0aWNJbmZvTGlzdBIzCgRsaXN0GAEgAygLMiUuTW9u",
            "TW9vc2UuU3RhdGljRGF0YS5FbnRpdHlTdGF0aWNJbmZvIlMKGFByZWZhYlBh",
            "dGhTdGF0aWNJbmZvTGlzdBI3CgRsaXN0GAEgAygLMikuTW9uTW9vc2UuU3Rh",
            "dGljRGF0YS5QcmVmYWJQYXRoU3RhdGljSW5mbyq1AQoPRUFjdG9yQ2xhc3NU",
            "eXBlEhgKFEVBY3RvckNsYXNzVHlwZV9Ob25lEAASGwoXRUFjdG9yQ2xhc3NU",
            "eXBlX1dhcnJpb3IQARIZChVFQWN0b3JDbGFzc1R5cGVfUHJpc3QQAhIaChZF",
            "QWN0b3JDbGFzc1R5cGVfQXJjaGVyEAMSGAoURUFjdG9yQ2xhc3NUeXBlX01h",
            "Z2UQBBIaChZFQWN0b3JDbGFzc1R5cGVfU2hhbWFuEAUq+AEKDkVBdHRyaWJ1",
            "dGVUeXBlEhcKE0VBdHRyaWJ1dGVUeXBlX05vbmUQABIVChFFQXR0cmlidXRl",
            "VHlwZV9IcBABEhkKFUVBdHRyaWJ1dGVUeXBlX0F0dGFjaxACEh4KGkVBdHRy",
            "aWJ1dGVUeXBlX0F0dGFja1NwZWVkEAMSIgoeRUF0dHJpYnV0ZVR5cGVfUGh5",
            "c2ljYWxEZWZlbmNlEAQSIQodRUF0dHJpYnV0ZVR5cGVfTWFnaWNhbERlZmVu",
            "Y2UQBRIcChhFQXR0cmlidXRlVHlwZV9Nb3ZlU3BlZWQQBhIWChJFQXR0cmli",
            "dXRlVHlwZV9NYXgQByppChBFQmF0dGxlU3RhZ2VUeXBlEhkKFUVCYXR0bGVT",
            "dGFnZVR5cGVfTm9uZRAAEhsKF0VCYXR0bGVTdGFnZVR5cGVfQmF0dGxlEAES",
            "HQoZRUJhdHRsZVN0YWdlVHlwZV9TY2VuYXJpbxACKlAKEkVCYXR0bGVUZXJy",
            "YWluVHlwZRIbChdFQmF0dGxlVGVycmFpblR5cGVfTm9uZRAAEh0KGUVCYXR0",
            "bGVUZXJyYWluVHlwZV9Ob3JtYWwQASqFAQoXRUJhdHRsZVdpbkNvbmRpdGlv",
            "blR5cGUSIAocRUJhdHRsZVdpbkNvbmRpdGlvblR5cGVfTm9uZRAAEiIKHkVC",
            "YXR0bGVXaW5Db25kaXRpb25UeXBlX0JhdHRsZRABEiQKIEVCYXR0bGVXaW5D",
            "b25kaXRpb25UeXBlX1NjZW5hcmlvEAIqOgoLRUVudGl0eVR5cGUSFAoQRUVu",
            "dGl0eVR5cGVfTm9uZRAAEhUKEUVFbnRpdHlUeXBlX0FjdG9yEAEqpwIKDUVQ",
            "cmVmYWJQYXRoSWQSFgoSRVByZWZhYlBhdGhJZF9Ob25lEAASHQoZRVByZWZh",
            "YlBhdGhJZF9Mb2JieVdpbmRvdxABEh8KG0VQcmVmYWJQYXRoSWRfTG9hZGlu",
            "Z1dpbmRvdxACEiIKHkVQcmVmYWJQYXRoSWRfQmF0dGxlTWFpbldpbmRvdxAD",
            "EiUKIUVQcmVmYWJQYXRoSWRfQmF0dGxlUHJlcGFyZVdpbmRvdxAEEioKJkVQ",
            "cmVmYWJQYXRoSWRfQmF0dGxlUHJlcGFyZUNvdmVyV2luZG93EAUSJwojRVBy",
            "ZWZhYlBhdGhJZF9CYXR0bGVQcmVmYWJBY3Rvckl0ZW0QBhIeChpFUHJlZmFi",
            "UGF0aElkX0JhdHRsZUNhbWVyYRAHYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MonMoose.StaticData.EActorClassType), typeof(global::MonMoose.StaticData.EAttributeType), typeof(global::MonMoose.StaticData.EBattleStageType), typeof(global::MonMoose.StaticData.EBattleTerrainType), typeof(global::MonMoose.StaticData.EBattleWinConditionType), typeof(global::MonMoose.StaticData.EEntityType), typeof(global::MonMoose.StaticData.EPrefabPathId), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.ActorStaticInfo), global::MonMoose.StaticData.ActorStaticInfo.Parser, new[]{ "Id", "Name", "Type", "MoveSpeed", "Attack", "Deffence", "PrefabPath", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.AttributeStaticInfo), global::MonMoose.StaticData.AttributeStaticInfo.Parser, new[]{ "Id", "Name", "IsSignInversed", "IconPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleGroundStaticInfo), global::MonMoose.StaticData.BattleGroundStaticInfo.Parser, new[]{ "Id", "ScenePath", "LeftWidth", "RightWidth", "Height", "GridIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleSceneStaticInfo), global::MonMoose.StaticData.BattleSceneStaticInfo.Parser, new[]{ "Id", "Name", "StageIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleStageStaticInfo), global::MonMoose.StaticData.BattleStageStaticInfo.Parser, new[]{ "Id", "Name", "StageEntityList", "EmbattleList", "NeedPrepare", "GroundId", "ScenePath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleTeamStaticInfo), global::MonMoose.StaticData.BattleTeamStaticInfo.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleTerrainStaticInfo), global::MonMoose.StaticData.BattleTerrainStaticInfo.Parser, new[]{ "Id", "Name", "WalkSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleWinConditionStaticInfo), global::MonMoose.StaticData.BattleWinConditionStaticInfo.Parser, new[]{ "Id", "Name", "ParamInt1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.CollectableActorStaticInfo), global::MonMoose.StaticData.CollectableActorStaticInfo.Parser, new[]{ "Id", "Name", "HeadIcon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.EntityStaticInfo), global::MonMoose.StaticData.EntityStaticInfo.Parser, new[]{ "Id", "EntityType", "SpecificId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.PrefabPathStaticInfo), global::MonMoose.StaticData.PrefabPathStaticInfo.Parser, new[]{ "Id", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.StageEntityStaticInfo), global::MonMoose.StaticData.StageEntityStaticInfo.Parser, new[]{ "Uid", "Rid", "Level", "PosX", "PosY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.EmbattleStaticInfo), global::MonMoose.StaticData.EmbattleStaticInfo.Parser, new[]{ "TeamId", "PosX", "PosY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.ActorStaticInfoList), global::MonMoose.StaticData.ActorStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.AttributeStaticInfoList), global::MonMoose.StaticData.AttributeStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleGroundStaticInfoList), global::MonMoose.StaticData.BattleGroundStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleSceneStaticInfoList), global::MonMoose.StaticData.BattleSceneStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleStageStaticInfoList), global::MonMoose.StaticData.BattleStageStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleTeamStaticInfoList), global::MonMoose.StaticData.BattleTeamStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleTerrainStaticInfoList), global::MonMoose.StaticData.BattleTerrainStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleWinConditionStaticInfoList), global::MonMoose.StaticData.BattleWinConditionStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.CollectableActorStaticInfoList), global::MonMoose.StaticData.CollectableActorStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.EntityStaticInfoList), global::MonMoose.StaticData.EntityStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.PrefabPathStaticInfoList), global::MonMoose.StaticData.PrefabPathStaticInfoList.Parser, new[]{ "List" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EActorClassType {
    [pbr::OriginalName("EActorClassType_None")] None = 0,
    [pbr::OriginalName("EActorClassType_Warrior")] Warrior = 1,
    [pbr::OriginalName("EActorClassType_Prist")] Prist = 2,
    [pbr::OriginalName("EActorClassType_Archer")] Archer = 3,
    [pbr::OriginalName("EActorClassType_Mage")] Mage = 4,
    [pbr::OriginalName("EActorClassType_Shaman")] Shaman = 5,
  }

  public enum EAttributeType {
    [pbr::OriginalName("EAttributeType_None")] None = 0,
    [pbr::OriginalName("EAttributeType_Hp")] Hp = 1,
    [pbr::OriginalName("EAttributeType_Attack")] Attack = 2,
    [pbr::OriginalName("EAttributeType_AttackSpeed")] AttackSpeed = 3,
    [pbr::OriginalName("EAttributeType_PhysicalDefence")] PhysicalDefence = 4,
    [pbr::OriginalName("EAttributeType_MagicalDefence")] MagicalDefence = 5,
    [pbr::OriginalName("EAttributeType_MoveSpeed")] MoveSpeed = 6,
    [pbr::OriginalName("EAttributeType_Max")] Max = 7,
  }

  public enum EBattleStageType {
    [pbr::OriginalName("EBattleStageType_None")] None = 0,
    [pbr::OriginalName("EBattleStageType_Battle")] Battle = 1,
    [pbr::OriginalName("EBattleStageType_Scenario")] Scenario = 2,
  }

  public enum EBattleTerrainType {
    [pbr::OriginalName("EBattleTerrainType_None")] None = 0,
    [pbr::OriginalName("EBattleTerrainType_Normal")] Normal = 1,
  }

  public enum EBattleWinConditionType {
    [pbr::OriginalName("EBattleWinConditionType_None")] None = 0,
    [pbr::OriginalName("EBattleWinConditionType_Battle")] Battle = 1,
    [pbr::OriginalName("EBattleWinConditionType_Scenario")] Scenario = 2,
  }

  public enum EEntityType {
    [pbr::OriginalName("EEntityType_None")] None = 0,
    [pbr::OriginalName("EEntityType_Actor")] Actor = 1,
  }

  public enum EPrefabPathId {
    [pbr::OriginalName("EPrefabPathId_None")] None = 0,
    [pbr::OriginalName("EPrefabPathId_LobbyWindow")] LobbyWindow = 1,
    [pbr::OriginalName("EPrefabPathId_LoadingWindow")] LoadingWindow = 2,
    [pbr::OriginalName("EPrefabPathId_BattleMainWindow")] BattleMainWindow = 3,
    [pbr::OriginalName("EPrefabPathId_BattlePrepareWindow")] BattlePrepareWindow = 4,
    [pbr::OriginalName("EPrefabPathId_BattlePrepareCoverWindow")] BattlePrepareCoverWindow = 5,
    [pbr::OriginalName("EPrefabPathId_BattlePrefabActorItem")] BattlePrefabActorItem = 6,
    [pbr::OriginalName("EPrefabPathId_BattleCamera")] BattleCamera = 7,
  }

  #endregion

  #region Messages
  public sealed partial class ActorStaticInfo : pb::IMessage<ActorStaticInfo> {
    private static readonly pb::MessageParser<ActorStaticInfo> _parser = new pb::MessageParser<ActorStaticInfo>(() => new ActorStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfo(ActorStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      type_ = other.type_;
      moveSpeed_ = other.moveSpeed_;
      attack_ = other.attack_;
      deffence_ = other.deffence_;
      prefabPath_ = other.prefabPath_;
      size_ = other.size_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfo Clone() {
      return new ActorStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::MonMoose.StaticData.EActorClassType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MonMoose.StaticData.EActorClassType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "MoveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 4;
    private int moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "Attack" field.</summary>
    public const int AttackFieldNumber = 5;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "Deffence" field.</summary>
    public const int DeffenceFieldNumber = 6;
    private int deffence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Deffence {
      get { return deffence_; }
      set {
        deffence_ = value;
      }
    }

    /// <summary>Field number for the "PrefabPath" field.</summary>
    public const int PrefabPathFieldNumber = 7;
    private string prefabPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefabPath {
      get { return prefabPath_; }
      set {
        prefabPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 8;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (Attack != other.Attack) return false;
      if (Deffence != other.Deffence) return false;
      if (PrefabPath != other.PrefabPath) return false;
      if (Size != other.Size) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Deffence != 0) hash ^= Deffence.GetHashCode();
      if (PrefabPath.Length != 0) hash ^= PrefabPath.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MoveSpeed);
      }
      if (Attack != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Attack);
      }
      if (Deffence != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Deffence);
      }
      if (PrefabPath.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PrefabPath);
      }
      if (Size != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Size);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Deffence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deffence);
      }
      if (PrefabPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabPath);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Deffence != 0) {
        Deffence = other.Deffence;
      }
      if (other.PrefabPath.Length != 0) {
        PrefabPath = other.PrefabPath;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            type_ = (global::MonMoose.StaticData.EActorClassType) input.ReadEnum();
            break;
          }
          case 32: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 40: {
            Attack = input.ReadInt32();
            break;
          }
          case 48: {
            Deffence = input.ReadInt32();
            break;
          }
          case 58: {
            PrefabPath = input.ReadString();
            break;
          }
          case 64: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttributeStaticInfo : pb::IMessage<AttributeStaticInfo> {
    private static readonly pb::MessageParser<AttributeStaticInfo> _parser = new pb::MessageParser<AttributeStaticInfo>(() => new AttributeStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfo(AttributeStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      isSignInversed_ = other.isSignInversed_;
      iconPath_ = other.iconPath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfo Clone() {
      return new AttributeStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsSignInversed" field.</summary>
    public const int IsSignInversedFieldNumber = 3;
    private bool isSignInversed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSignInversed {
      get { return isSignInversed_; }
      set {
        isSignInversed_ = value;
      }
    }

    /// <summary>Field number for the "IconPath" field.</summary>
    public const int IconPathFieldNumber = 4;
    private string iconPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconPath {
      get { return iconPath_; }
      set {
        iconPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (IsSignInversed != other.IsSignInversed) return false;
      if (IconPath != other.IconPath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsSignInversed != false) hash ^= IsSignInversed.GetHashCode();
      if (IconPath.Length != 0) hash ^= IconPath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsSignInversed != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSignInversed);
      }
      if (IconPath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IconPath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsSignInversed != false) {
        size += 1 + 1;
      }
      if (IconPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconPath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsSignInversed != false) {
        IsSignInversed = other.IsSignInversed;
      }
      if (other.IconPath.Length != 0) {
        IconPath = other.IconPath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsSignInversed = input.ReadBool();
            break;
          }
          case 34: {
            IconPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleGroundStaticInfo : pb::IMessage<BattleGroundStaticInfo> {
    private static readonly pb::MessageParser<BattleGroundStaticInfo> _parser = new pb::MessageParser<BattleGroundStaticInfo>(() => new BattleGroundStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleGroundStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleGroundStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleGroundStaticInfo(BattleGroundStaticInfo other) : this() {
      id_ = other.id_;
      scenePath_ = other.scenePath_;
      leftWidth_ = other.leftWidth_;
      rightWidth_ = other.rightWidth_;
      height_ = other.height_;
      gridIdList_ = other.gridIdList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleGroundStaticInfo Clone() {
      return new BattleGroundStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ScenePath" field.</summary>
    public const int ScenePathFieldNumber = 2;
    private string scenePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScenePath {
      get { return scenePath_; }
      set {
        scenePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LeftWidth" field.</summary>
    public const int LeftWidthFieldNumber = 3;
    private int leftWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftWidth {
      get { return leftWidth_; }
      set {
        leftWidth_ = value;
      }
    }

    /// <summary>Field number for the "RightWidth" field.</summary>
    public const int RightWidthFieldNumber = 4;
    private int rightWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RightWidth {
      get { return rightWidth_; }
      set {
        rightWidth_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 5;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "GridIdList" field.</summary>
    public const int GridIdListFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_gridIdList_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> gridIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GridIdList {
      get { return gridIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleGroundStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleGroundStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ScenePath != other.ScenePath) return false;
      if (LeftWidth != other.LeftWidth) return false;
      if (RightWidth != other.RightWidth) return false;
      if (Height != other.Height) return false;
      if(!gridIdList_.Equals(other.gridIdList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ScenePath.Length != 0) hash ^= ScenePath.GetHashCode();
      if (LeftWidth != 0) hash ^= LeftWidth.GetHashCode();
      if (RightWidth != 0) hash ^= RightWidth.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= gridIdList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ScenePath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ScenePath);
      }
      if (LeftWidth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftWidth);
      }
      if (RightWidth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RightWidth);
      }
      if (Height != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Height);
      }
      gridIdList_.WriteTo(output, _repeated_gridIdList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ScenePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScenePath);
      }
      if (LeftWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftWidth);
      }
      if (RightWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightWidth);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      size += gridIdList_.CalculateSize(_repeated_gridIdList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleGroundStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ScenePath.Length != 0) {
        ScenePath = other.ScenePath;
      }
      if (other.LeftWidth != 0) {
        LeftWidth = other.LeftWidth;
      }
      if (other.RightWidth != 0) {
        RightWidth = other.RightWidth;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      gridIdList_.Add(other.gridIdList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            ScenePath = input.ReadString();
            break;
          }
          case 24: {
            LeftWidth = input.ReadInt32();
            break;
          }
          case 32: {
            RightWidth = input.ReadInt32();
            break;
          }
          case 40: {
            Height = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            gridIdList_.AddEntriesFrom(input, _repeated_gridIdList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleSceneStaticInfo : pb::IMessage<BattleSceneStaticInfo> {
    private static readonly pb::MessageParser<BattleSceneStaticInfo> _parser = new pb::MessageParser<BattleSceneStaticInfo>(() => new BattleSceneStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleSceneStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfo(BattleSceneStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      stageIdList_ = other.stageIdList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfo Clone() {
      return new BattleSceneStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StageIdList" field.</summary>
    public const int StageIdListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_stageIdList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> stageIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StageIdList {
      get { return stageIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleSceneStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleSceneStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!stageIdList_.Equals(other.stageIdList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= stageIdList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      stageIdList_.WriteTo(output, _repeated_stageIdList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += stageIdList_.CalculateSize(_repeated_stageIdList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleSceneStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      stageIdList_.Add(other.stageIdList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            stageIdList_.AddEntriesFrom(input, _repeated_stageIdList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleStageStaticInfo : pb::IMessage<BattleStageStaticInfo> {
    private static readonly pb::MessageParser<BattleStageStaticInfo> _parser = new pb::MessageParser<BattleStageStaticInfo>(() => new BattleStageStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleStageStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfo(BattleStageStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      stageEntityList_ = other.stageEntityList_.Clone();
      embattleList_ = other.embattleList_.Clone();
      needPrepare_ = other.needPrepare_;
      groundId_ = other.groundId_;
      scenePath_ = other.scenePath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfo Clone() {
      return new BattleStageStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StageEntityList" field.</summary>
    public const int StageEntityListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.StageEntityStaticInfo> _repeated_stageEntityList_codec
        = pb::FieldCodec.ForMessage(26, global::MonMoose.StaticData.StageEntityStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.StageEntityStaticInfo> stageEntityList_ = new pbc::RepeatedField<global::MonMoose.StaticData.StageEntityStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.StageEntityStaticInfo> StageEntityList {
      get { return stageEntityList_; }
    }

    /// <summary>Field number for the "EmbattleList" field.</summary>
    public const int EmbattleListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.EmbattleStaticInfo> _repeated_embattleList_codec
        = pb::FieldCodec.ForMessage(34, global::MonMoose.StaticData.EmbattleStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.EmbattleStaticInfo> embattleList_ = new pbc::RepeatedField<global::MonMoose.StaticData.EmbattleStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.EmbattleStaticInfo> EmbattleList {
      get { return embattleList_; }
    }

    /// <summary>Field number for the "NeedPrepare" field.</summary>
    public const int NeedPrepareFieldNumber = 5;
    private bool needPrepare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedPrepare {
      get { return needPrepare_; }
      set {
        needPrepare_ = value;
      }
    }

    /// <summary>Field number for the "GroundId" field.</summary>
    public const int GroundIdFieldNumber = 6;
    private int groundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroundId {
      get { return groundId_; }
      set {
        groundId_ = value;
      }
    }

    /// <summary>Field number for the "ScenePath" field.</summary>
    public const int ScenePathFieldNumber = 7;
    private string scenePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScenePath {
      get { return scenePath_; }
      set {
        scenePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleStageStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleStageStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!stageEntityList_.Equals(other.stageEntityList_)) return false;
      if(!embattleList_.Equals(other.embattleList_)) return false;
      if (NeedPrepare != other.NeedPrepare) return false;
      if (GroundId != other.GroundId) return false;
      if (ScenePath != other.ScenePath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= stageEntityList_.GetHashCode();
      hash ^= embattleList_.GetHashCode();
      if (NeedPrepare != false) hash ^= NeedPrepare.GetHashCode();
      if (GroundId != 0) hash ^= GroundId.GetHashCode();
      if (ScenePath.Length != 0) hash ^= ScenePath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      stageEntityList_.WriteTo(output, _repeated_stageEntityList_codec);
      embattleList_.WriteTo(output, _repeated_embattleList_codec);
      if (NeedPrepare != false) {
        output.WriteRawTag(40);
        output.WriteBool(NeedPrepare);
      }
      if (GroundId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GroundId);
      }
      if (ScenePath.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ScenePath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += stageEntityList_.CalculateSize(_repeated_stageEntityList_codec);
      size += embattleList_.CalculateSize(_repeated_embattleList_codec);
      if (NeedPrepare != false) {
        size += 1 + 1;
      }
      if (GroundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroundId);
      }
      if (ScenePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScenePath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleStageStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      stageEntityList_.Add(other.stageEntityList_);
      embattleList_.Add(other.embattleList_);
      if (other.NeedPrepare != false) {
        NeedPrepare = other.NeedPrepare;
      }
      if (other.GroundId != 0) {
        GroundId = other.GroundId;
      }
      if (other.ScenePath.Length != 0) {
        ScenePath = other.ScenePath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            stageEntityList_.AddEntriesFrom(input, _repeated_stageEntityList_codec);
            break;
          }
          case 34: {
            embattleList_.AddEntriesFrom(input, _repeated_embattleList_codec);
            break;
          }
          case 40: {
            NeedPrepare = input.ReadBool();
            break;
          }
          case 48: {
            GroundId = input.ReadInt32();
            break;
          }
          case 58: {
            ScenePath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleTeamStaticInfo : pb::IMessage<BattleTeamStaticInfo> {
    private static readonly pb::MessageParser<BattleTeamStaticInfo> _parser = new pb::MessageParser<BattleTeamStaticInfo>(() => new BattleTeamStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleTeamStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTeamStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTeamStaticInfo(BattleTeamStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTeamStaticInfo Clone() {
      return new BattleTeamStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleTeamStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleTeamStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleTeamStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleTerrainStaticInfo : pb::IMessage<BattleTerrainStaticInfo> {
    private static readonly pb::MessageParser<BattleTerrainStaticInfo> _parser = new pb::MessageParser<BattleTerrainStaticInfo>(() => new BattleTerrainStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleTerrainStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTerrainStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTerrainStaticInfo(BattleTerrainStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      walkSpeed_ = other.walkSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTerrainStaticInfo Clone() {
      return new BattleTerrainStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WalkSpeed" field.</summary>
    public const int WalkSpeedFieldNumber = 3;
    private int walkSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WalkSpeed {
      get { return walkSpeed_; }
      set {
        walkSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleTerrainStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleTerrainStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (WalkSpeed != other.WalkSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (WalkSpeed != 0) hash ^= WalkSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (WalkSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WalkSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (WalkSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WalkSpeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleTerrainStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.WalkSpeed != 0) {
        WalkSpeed = other.WalkSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            WalkSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleWinConditionStaticInfo : pb::IMessage<BattleWinConditionStaticInfo> {
    private static readonly pb::MessageParser<BattleWinConditionStaticInfo> _parser = new pb::MessageParser<BattleWinConditionStaticInfo>(() => new BattleWinConditionStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleWinConditionStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleWinConditionStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleWinConditionStaticInfo(BattleWinConditionStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      paramInt1_ = other.paramInt1_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleWinConditionStaticInfo Clone() {
      return new BattleWinConditionStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ParamInt1" field.</summary>
    public const int ParamInt1FieldNumber = 3;
    private int paramInt1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParamInt1 {
      get { return paramInt1_; }
      set {
        paramInt1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleWinConditionStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleWinConditionStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ParamInt1 != other.ParamInt1) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ParamInt1 != 0) hash ^= ParamInt1.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ParamInt1 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ParamInt1);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ParamInt1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParamInt1);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleWinConditionStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ParamInt1 != 0) {
        ParamInt1 = other.ParamInt1;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            ParamInt1 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CollectableActorStaticInfo : pb::IMessage<CollectableActorStaticInfo> {
    private static readonly pb::MessageParser<CollectableActorStaticInfo> _parser = new pb::MessageParser<CollectableActorStaticInfo>(() => new CollectableActorStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectableActorStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectableActorStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectableActorStaticInfo(CollectableActorStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      headIcon_ = other.headIcon_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectableActorStaticInfo Clone() {
      return new CollectableActorStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HeadIcon" field.</summary>
    public const int HeadIconFieldNumber = 3;
    private string headIcon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectableActorStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectableActorStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (HeadIcon != other.HeadIcon) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HeadIcon.Length != 0) hash ^= HeadIcon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HeadIcon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeadIcon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HeadIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIcon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectableActorStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HeadIcon.Length != 0) {
        HeadIcon = other.HeadIcon;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            HeadIcon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityStaticInfo : pb::IMessage<EntityStaticInfo> {
    private static readonly pb::MessageParser<EntityStaticInfo> _parser = new pb::MessageParser<EntityStaticInfo>(() => new EntityStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfo(EntityStaticInfo other) : this() {
      id_ = other.id_;
      entityType_ = other.entityType_;
      specificId_ = other.specificId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfo Clone() {
      return new EntityStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "EntityType" field.</summary>
    public const int EntityTypeFieldNumber = 2;
    private global::MonMoose.StaticData.EEntityType entityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MonMoose.StaticData.EEntityType EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    /// <summary>Field number for the "SpecificId" field.</summary>
    public const int SpecificIdFieldNumber = 3;
    private int specificId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecificId {
      get { return specificId_; }
      set {
        specificId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EntityType != other.EntityType) return false;
      if (SpecificId != other.SpecificId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EntityType != 0) hash ^= EntityType.GetHashCode();
      if (SpecificId != 0) hash ^= SpecificId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EntityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EntityType);
      }
      if (SpecificId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpecificId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EntityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityType);
      }
      if (SpecificId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecificId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EntityType != 0) {
        EntityType = other.EntityType;
      }
      if (other.SpecificId != 0) {
        SpecificId = other.SpecificId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            entityType_ = (global::MonMoose.StaticData.EEntityType) input.ReadEnum();
            break;
          }
          case 24: {
            SpecificId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrefabPathStaticInfo : pb::IMessage<PrefabPathStaticInfo> {
    private static readonly pb::MessageParser<PrefabPathStaticInfo> _parser = new pb::MessageParser<PrefabPathStaticInfo>(() => new PrefabPathStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrefabPathStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfo(PrefabPathStaticInfo other) : this() {
      id_ = other.id_;
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfo Clone() {
      return new PrefabPathStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrefabPathStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrefabPathStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrefabPathStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StageEntityStaticInfo : pb::IMessage<StageEntityStaticInfo> {
    private static readonly pb::MessageParser<StageEntityStaticInfo> _parser = new pb::MessageParser<StageEntityStaticInfo>(() => new StageEntityStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StageEntityStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageEntityStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageEntityStaticInfo(StageEntityStaticInfo other) : this() {
      uid_ = other.uid_;
      rid_ = other.rid_;
      level_ = other.level_;
      posX_ = other.posX_;
      posY_ = other.posY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageEntityStaticInfo Clone() {
      return new StageEntityStaticInfo(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Rid" field.</summary>
    public const int RidFieldNumber = 2;
    private int rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 4;
    private int posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 5;
    private int posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StageEntityStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StageEntityStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Rid != other.Rid) return false;
      if (Level != other.Level) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Rid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rid);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (PosX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PosY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StageEntityStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Rid = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            PosX = input.ReadInt32();
            break;
          }
          case 40: {
            PosY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmbattleStaticInfo : pb::IMessage<EmbattleStaticInfo> {
    private static readonly pb::MessageParser<EmbattleStaticInfo> _parser = new pb::MessageParser<EmbattleStaticInfo>(() => new EmbattleStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmbattleStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbattleStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbattleStaticInfo(EmbattleStaticInfo other) : this() {
      teamId_ = other.teamId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbattleStaticInfo Clone() {
      return new EmbattleStaticInfo(this);
    }

    /// <summary>Field number for the "TeamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private int teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 2;
    private int posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 3;
    private int posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmbattleStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmbattleStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamId != 0) hash ^= TeamId.GetHashCode();
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamId);
      }
      if (PosX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PosY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmbattleStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamId != 0) {
        TeamId = other.TeamId;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadInt32();
            break;
          }
          case 16: {
            PosX = input.ReadInt32();
            break;
          }
          case 24: {
            PosY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActorStaticInfoList : pb::IMessage<ActorStaticInfoList> {
    private static readonly pb::MessageParser<ActorStaticInfoList> _parser = new pb::MessageParser<ActorStaticInfoList>(() => new ActorStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfoList(ActorStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfoList Clone() {
      return new ActorStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.ActorStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.ActorStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.ActorStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.ActorStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.ActorStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttributeStaticInfoList : pb::IMessage<AttributeStaticInfoList> {
    private static readonly pb::MessageParser<AttributeStaticInfoList> _parser = new pb::MessageParser<AttributeStaticInfoList>(() => new AttributeStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfoList(AttributeStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfoList Clone() {
      return new AttributeStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.AttributeStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.AttributeStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.AttributeStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.AttributeStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.AttributeStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleGroundStaticInfoList : pb::IMessage<BattleGroundStaticInfoList> {
    private static readonly pb::MessageParser<BattleGroundStaticInfoList> _parser = new pb::MessageParser<BattleGroundStaticInfoList>(() => new BattleGroundStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleGroundStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleGroundStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleGroundStaticInfoList(BattleGroundStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleGroundStaticInfoList Clone() {
      return new BattleGroundStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.BattleGroundStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.BattleGroundStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.BattleGroundStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.BattleGroundStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.BattleGroundStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleGroundStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleGroundStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleGroundStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleSceneStaticInfoList : pb::IMessage<BattleSceneStaticInfoList> {
    private static readonly pb::MessageParser<BattleSceneStaticInfoList> _parser = new pb::MessageParser<BattleSceneStaticInfoList>(() => new BattleSceneStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleSceneStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfoList(BattleSceneStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfoList Clone() {
      return new BattleSceneStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.BattleSceneStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.BattleSceneStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.BattleSceneStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.BattleSceneStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.BattleSceneStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleSceneStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleSceneStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleSceneStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleStageStaticInfoList : pb::IMessage<BattleStageStaticInfoList> {
    private static readonly pb::MessageParser<BattleStageStaticInfoList> _parser = new pb::MessageParser<BattleStageStaticInfoList>(() => new BattleStageStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleStageStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfoList(BattleStageStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfoList Clone() {
      return new BattleStageStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.BattleStageStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.BattleStageStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.BattleStageStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.BattleStageStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.BattleStageStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleStageStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleStageStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleStageStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleTeamStaticInfoList : pb::IMessage<BattleTeamStaticInfoList> {
    private static readonly pb::MessageParser<BattleTeamStaticInfoList> _parser = new pb::MessageParser<BattleTeamStaticInfoList>(() => new BattleTeamStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleTeamStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTeamStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTeamStaticInfoList(BattleTeamStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTeamStaticInfoList Clone() {
      return new BattleTeamStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.BattleTeamStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.BattleTeamStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.BattleTeamStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.BattleTeamStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.BattleTeamStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleTeamStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleTeamStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleTeamStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleTerrainStaticInfoList : pb::IMessage<BattleTerrainStaticInfoList> {
    private static readonly pb::MessageParser<BattleTerrainStaticInfoList> _parser = new pb::MessageParser<BattleTerrainStaticInfoList>(() => new BattleTerrainStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleTerrainStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTerrainStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTerrainStaticInfoList(BattleTerrainStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTerrainStaticInfoList Clone() {
      return new BattleTerrainStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.BattleTerrainStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.BattleTerrainStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.BattleTerrainStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.BattleTerrainStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.BattleTerrainStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleTerrainStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleTerrainStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleTerrainStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleWinConditionStaticInfoList : pb::IMessage<BattleWinConditionStaticInfoList> {
    private static readonly pb::MessageParser<BattleWinConditionStaticInfoList> _parser = new pb::MessageParser<BattleWinConditionStaticInfoList>(() => new BattleWinConditionStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleWinConditionStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleWinConditionStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleWinConditionStaticInfoList(BattleWinConditionStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleWinConditionStaticInfoList Clone() {
      return new BattleWinConditionStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.BattleWinConditionStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.BattleWinConditionStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.BattleWinConditionStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.BattleWinConditionStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.BattleWinConditionStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleWinConditionStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleWinConditionStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleWinConditionStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CollectableActorStaticInfoList : pb::IMessage<CollectableActorStaticInfoList> {
    private static readonly pb::MessageParser<CollectableActorStaticInfoList> _parser = new pb::MessageParser<CollectableActorStaticInfoList>(() => new CollectableActorStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectableActorStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectableActorStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectableActorStaticInfoList(CollectableActorStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectableActorStaticInfoList Clone() {
      return new CollectableActorStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.CollectableActorStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.CollectableActorStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.CollectableActorStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.CollectableActorStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.CollectableActorStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectableActorStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectableActorStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectableActorStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityStaticInfoList : pb::IMessage<EntityStaticInfoList> {
    private static readonly pb::MessageParser<EntityStaticInfoList> _parser = new pb::MessageParser<EntityStaticInfoList>(() => new EntityStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfoList(EntityStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfoList Clone() {
      return new EntityStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.EntityStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.EntityStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.EntityStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.EntityStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.EntityStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrefabPathStaticInfoList : pb::IMessage<PrefabPathStaticInfoList> {
    private static readonly pb::MessageParser<PrefabPathStaticInfoList> _parser = new pb::MessageParser<PrefabPathStaticInfoList>(() => new PrefabPathStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrefabPathStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfoList(PrefabPathStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfoList Clone() {
      return new PrefabPathStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.PrefabPathStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.PrefabPathStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.PrefabPathStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.PrefabPathStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.PrefabPathStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrefabPathStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrefabPathStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrefabPathStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
