// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client/Proto/IL/Structure.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MonMoose.StaticData {

  /// <summary>Holder for reflection information generated from Client/Proto/IL/Structure.proto</summary>
  public static partial class StructureReflection {

    #region Descriptor
    /// <summary>File descriptor for Client/Proto/IL/Structure.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StructureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9DbGllbnQvUHJvdG8vSUwvU3RydWN0dXJlLnByb3RvEhNNb25Nb29zZS5T",
            "dGF0aWNEYXRhIrYBCg9BY3RvclN0YXRpY0luZm8SCgoCSWQYASABKAUSDAoE",
            "TmFtZRgCIAEoCRIyCgRUeXBlGAMgASgOMiQuTW9uTW9vc2UuU3RhdGljRGF0",
            "YS5FQWN0b3JDbGFzc1R5cGUSEQoJTW92ZVNwZWVkGAQgASgFEg4KBkF0dGFj",
            "axgFIAEoBRIQCghEZWZmZW5jZRgGIAEoBRISCgpQcmVmYWJQYXRoGAcgASgJ",
            "EgwKBFNpemUYCCABKAUiWQoTQXR0cmlidXRlU3RhdGljSW5mbxIKCgJJZBgB",
            "IAEoBRIMCgROYW1lGAIgASgJEhYKDklzU2lnbkludmVyc2VkGAMgASgIEhAK",
            "CEljb25QYXRoGAQgASgJIkYKFUJhdHRsZVNjZW5lU3RhdGljSW5mbxIKCgJJ",
            "ZBgBIAEoBRIMCgROYW1lGAIgASgJEhMKC1N0YWdlSWRMaXN0GAMgAygFInwK",
            "FUJhdHRsZVN0YWdlU3RhdGljSW5mbxIKCgJJZBgBIAEoBRIMCgROYW1lGAIg",
            "ASgJEhEKCUxlZnRXaWR0aBgDIAEoBRISCgpSaWdodFdpZHRoGAQgASgFEg4K",
            "BkhlaWdodBgFIAEoBRISCgpHcmlkSWRMaXN0GAYgAygFIkAKEVRlcnJhaW5T",
            "dGF0aWNJbmZvEgoKAklkGAEgASgFEgwKBE5hbWUYAiABKAkSEQoJV2Fsa1Nw",
            "ZWVkGAMgASgFImgKEEVudGl0eVN0YXRpY0luZm8SCgoCSWQYASABKAUSNAoK",
            "RW50aXR5VHlwZRgCIAEoDjIgLk1vbk1vb3NlLlN0YXRpY0RhdGEuRUVudGl0",
            "eVR5cGUSEgoKU3BlY2lmaWNJZBgDIAEoBSIwChRQcmVmYWJQYXRoU3RhdGlj",
            "SW5mbxIKCgJJZBgBIAEoBRIMCgRQYXRoGAIgASgJIkkKE0FjdG9yU3RhdGlj",
            "SW5mb0xpc3QSMgoEbGlzdBgBIAMoCzIkLk1vbk1vb3NlLlN0YXRpY0RhdGEu",
            "QWN0b3JTdGF0aWNJbmZvIlEKF0F0dHJpYnV0ZVN0YXRpY0luZm9MaXN0EjYK",
            "BGxpc3QYASADKAsyKC5Nb25Nb29zZS5TdGF0aWNEYXRhLkF0dHJpYnV0ZVN0",
            "YXRpY0luZm8iVQoZQmF0dGxlU2NlbmVTdGF0aWNJbmZvTGlzdBI4CgRsaXN0",
            "GAEgAygLMiouTW9uTW9vc2UuU3RhdGljRGF0YS5CYXR0bGVTY2VuZVN0YXRp",
            "Y0luZm8iVQoZQmF0dGxlU3RhZ2VTdGF0aWNJbmZvTGlzdBI4CgRsaXN0GAEg",
            "AygLMiouTW9uTW9vc2UuU3RhdGljRGF0YS5CYXR0bGVTdGFnZVN0YXRpY0lu",
            "Zm8iTQoVVGVycmFpblN0YXRpY0luZm9MaXN0EjQKBGxpc3QYASADKAsyJi5N",
            "b25Nb29zZS5TdGF0aWNEYXRhLlRlcnJhaW5TdGF0aWNJbmZvIksKFEVudGl0",
            "eVN0YXRpY0luZm9MaXN0EjMKBGxpc3QYASADKAsyJS5Nb25Nb29zZS5TdGF0",
            "aWNEYXRhLkVudGl0eVN0YXRpY0luZm8iUwoYUHJlZmFiUGF0aFN0YXRpY0lu",
            "Zm9MaXN0EjcKBGxpc3QYASADKAsyKS5Nb25Nb29zZS5TdGF0aWNEYXRhLlBy",
            "ZWZhYlBhdGhTdGF0aWNJbmZvKrUBCg9FQWN0b3JDbGFzc1R5cGUSGAoURUFj",
            "dG9yQ2xhc3NUeXBlX05vbmUQABIbChdFQWN0b3JDbGFzc1R5cGVfV2Fycmlv",
            "chABEhkKFUVBY3RvckNsYXNzVHlwZV9QcmlzdBACEhoKFkVBY3RvckNsYXNz",
            "VHlwZV9BcmNoZXIQAxIYChRFQWN0b3JDbGFzc1R5cGVfTWFnZRAEEhoKFkVB",
            "Y3RvckNsYXNzVHlwZV9TaGFtYW4QBSr4AQoORUF0dHJpYnV0ZVR5cGUSFwoT",
            "RUF0dHJpYnV0ZVR5cGVfTm9uZRAAEhUKEUVBdHRyaWJ1dGVUeXBlX0hwEAES",
            "GQoVRUF0dHJpYnV0ZVR5cGVfQXR0YWNrEAISHgoaRUF0dHJpYnV0ZVR5cGVf",
            "QXR0YWNrU3BlZWQQAxIiCh5FQXR0cmlidXRlVHlwZV9QaHlzaWNhbERlZmVu",
            "Y2UQBBIhCh1FQXR0cmlidXRlVHlwZV9NYWdpY2FsRGVmZW5jZRAFEhwKGEVB",
            "dHRyaWJ1dGVUeXBlX01vdmVTcGVlZBAGEhYKEkVBdHRyaWJ1dGVUeXBlX01h",
            "eBAHKj4KDEVUZXJyYWluVHlwZRIVChFFVGVycmFpblR5cGVfTm9uZRAAEhcK",
            "E0VUZXJyYWluVHlwZV9Ob3JtYWwQASo6CgtFRW50aXR5VHlwZRIUChBFRW50",
            "aXR5VHlwZV9Ob25lEAASFQoRRUVudGl0eVR5cGVfQWN0b3IQASpQCg1FUHJl",
            "ZmFiUGF0aElkEhYKEkVQcmVmYWJQYXRoSWRfTm9uZRAAEicKI0VQcmVmYWJQ",
            "YXRoSWRfQmF0dGxlUHJlZmFiQWN0b3JJdGVtEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MonMoose.StaticData.EActorClassType), typeof(global::MonMoose.StaticData.EAttributeType), typeof(global::MonMoose.StaticData.ETerrainType), typeof(global::MonMoose.StaticData.EEntityType), typeof(global::MonMoose.StaticData.EPrefabPathId), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.ActorStaticInfo), global::MonMoose.StaticData.ActorStaticInfo.Parser, new[]{ "Id", "Name", "Type", "MoveSpeed", "Attack", "Deffence", "PrefabPath", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.AttributeStaticInfo), global::MonMoose.StaticData.AttributeStaticInfo.Parser, new[]{ "Id", "Name", "IsSignInversed", "IconPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleSceneStaticInfo), global::MonMoose.StaticData.BattleSceneStaticInfo.Parser, new[]{ "Id", "Name", "StageIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleStageStaticInfo), global::MonMoose.StaticData.BattleStageStaticInfo.Parser, new[]{ "Id", "Name", "LeftWidth", "RightWidth", "Height", "GridIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.TerrainStaticInfo), global::MonMoose.StaticData.TerrainStaticInfo.Parser, new[]{ "Id", "Name", "WalkSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.EntityStaticInfo), global::MonMoose.StaticData.EntityStaticInfo.Parser, new[]{ "Id", "EntityType", "SpecificId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.PrefabPathStaticInfo), global::MonMoose.StaticData.PrefabPathStaticInfo.Parser, new[]{ "Id", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.ActorStaticInfoList), global::MonMoose.StaticData.ActorStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.AttributeStaticInfoList), global::MonMoose.StaticData.AttributeStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleSceneStaticInfoList), global::MonMoose.StaticData.BattleSceneStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.BattleStageStaticInfoList), global::MonMoose.StaticData.BattleStageStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.TerrainStaticInfoList), global::MonMoose.StaticData.TerrainStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.EntityStaticInfoList), global::MonMoose.StaticData.EntityStaticInfoList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MonMoose.StaticData.PrefabPathStaticInfoList), global::MonMoose.StaticData.PrefabPathStaticInfoList.Parser, new[]{ "List" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EActorClassType {
    [pbr::OriginalName("EActorClassType_None")] None = 0,
    [pbr::OriginalName("EActorClassType_Warrior")] Warrior = 1,
    [pbr::OriginalName("EActorClassType_Prist")] Prist = 2,
    [pbr::OriginalName("EActorClassType_Archer")] Archer = 3,
    [pbr::OriginalName("EActorClassType_Mage")] Mage = 4,
    [pbr::OriginalName("EActorClassType_Shaman")] Shaman = 5,
  }

  public enum EAttributeType {
    [pbr::OriginalName("EAttributeType_None")] None = 0,
    [pbr::OriginalName("EAttributeType_Hp")] Hp = 1,
    [pbr::OriginalName("EAttributeType_Attack")] Attack = 2,
    [pbr::OriginalName("EAttributeType_AttackSpeed")] AttackSpeed = 3,
    [pbr::OriginalName("EAttributeType_PhysicalDefence")] PhysicalDefence = 4,
    [pbr::OriginalName("EAttributeType_MagicalDefence")] MagicalDefence = 5,
    [pbr::OriginalName("EAttributeType_MoveSpeed")] MoveSpeed = 6,
    [pbr::OriginalName("EAttributeType_Max")] Max = 7,
  }

  public enum ETerrainType {
    [pbr::OriginalName("ETerrainType_None")] None = 0,
    [pbr::OriginalName("ETerrainType_Normal")] Normal = 1,
  }

  public enum EEntityType {
    [pbr::OriginalName("EEntityType_None")] None = 0,
    [pbr::OriginalName("EEntityType_Actor")] Actor = 1,
  }

  public enum EPrefabPathId {
    [pbr::OriginalName("EPrefabPathId_None")] None = 0,
    [pbr::OriginalName("EPrefabPathId_BattlePrefabActorItem")] BattlePrefabActorItem = 1,
  }

  #endregion

  #region Messages
  public sealed partial class ActorStaticInfo : pb::IMessage<ActorStaticInfo> {
    private static readonly pb::MessageParser<ActorStaticInfo> _parser = new pb::MessageParser<ActorStaticInfo>(() => new ActorStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfo(ActorStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      type_ = other.type_;
      moveSpeed_ = other.moveSpeed_;
      attack_ = other.attack_;
      deffence_ = other.deffence_;
      prefabPath_ = other.prefabPath_;
      size_ = other.size_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfo Clone() {
      return new ActorStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::MonMoose.StaticData.EActorClassType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MonMoose.StaticData.EActorClassType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "MoveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 4;
    private int moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "Attack" field.</summary>
    public const int AttackFieldNumber = 5;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "Deffence" field.</summary>
    public const int DeffenceFieldNumber = 6;
    private int deffence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Deffence {
      get { return deffence_; }
      set {
        deffence_ = value;
      }
    }

    /// <summary>Field number for the "PrefabPath" field.</summary>
    public const int PrefabPathFieldNumber = 7;
    private string prefabPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefabPath {
      get { return prefabPath_; }
      set {
        prefabPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 8;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (Attack != other.Attack) return false;
      if (Deffence != other.Deffence) return false;
      if (PrefabPath != other.PrefabPath) return false;
      if (Size != other.Size) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Deffence != 0) hash ^= Deffence.GetHashCode();
      if (PrefabPath.Length != 0) hash ^= PrefabPath.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MoveSpeed);
      }
      if (Attack != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Attack);
      }
      if (Deffence != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Deffence);
      }
      if (PrefabPath.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PrefabPath);
      }
      if (Size != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Size);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Deffence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deffence);
      }
      if (PrefabPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabPath);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Deffence != 0) {
        Deffence = other.Deffence;
      }
      if (other.PrefabPath.Length != 0) {
        PrefabPath = other.PrefabPath;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            type_ = (global::MonMoose.StaticData.EActorClassType) input.ReadEnum();
            break;
          }
          case 32: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 40: {
            Attack = input.ReadInt32();
            break;
          }
          case 48: {
            Deffence = input.ReadInt32();
            break;
          }
          case 58: {
            PrefabPath = input.ReadString();
            break;
          }
          case 64: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttributeStaticInfo : pb::IMessage<AttributeStaticInfo> {
    private static readonly pb::MessageParser<AttributeStaticInfo> _parser = new pb::MessageParser<AttributeStaticInfo>(() => new AttributeStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfo(AttributeStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      isSignInversed_ = other.isSignInversed_;
      iconPath_ = other.iconPath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfo Clone() {
      return new AttributeStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsSignInversed" field.</summary>
    public const int IsSignInversedFieldNumber = 3;
    private bool isSignInversed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSignInversed {
      get { return isSignInversed_; }
      set {
        isSignInversed_ = value;
      }
    }

    /// <summary>Field number for the "IconPath" field.</summary>
    public const int IconPathFieldNumber = 4;
    private string iconPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconPath {
      get { return iconPath_; }
      set {
        iconPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (IsSignInversed != other.IsSignInversed) return false;
      if (IconPath != other.IconPath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsSignInversed != false) hash ^= IsSignInversed.GetHashCode();
      if (IconPath.Length != 0) hash ^= IconPath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsSignInversed != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSignInversed);
      }
      if (IconPath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IconPath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsSignInversed != false) {
        size += 1 + 1;
      }
      if (IconPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconPath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsSignInversed != false) {
        IsSignInversed = other.IsSignInversed;
      }
      if (other.IconPath.Length != 0) {
        IconPath = other.IconPath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsSignInversed = input.ReadBool();
            break;
          }
          case 34: {
            IconPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleSceneStaticInfo : pb::IMessage<BattleSceneStaticInfo> {
    private static readonly pb::MessageParser<BattleSceneStaticInfo> _parser = new pb::MessageParser<BattleSceneStaticInfo>(() => new BattleSceneStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleSceneStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfo(BattleSceneStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      stageIdList_ = other.stageIdList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfo Clone() {
      return new BattleSceneStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StageIdList" field.</summary>
    public const int StageIdListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_stageIdList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> stageIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StageIdList {
      get { return stageIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleSceneStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleSceneStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!stageIdList_.Equals(other.stageIdList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= stageIdList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      stageIdList_.WriteTo(output, _repeated_stageIdList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += stageIdList_.CalculateSize(_repeated_stageIdList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleSceneStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      stageIdList_.Add(other.stageIdList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            stageIdList_.AddEntriesFrom(input, _repeated_stageIdList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleStageStaticInfo : pb::IMessage<BattleStageStaticInfo> {
    private static readonly pb::MessageParser<BattleStageStaticInfo> _parser = new pb::MessageParser<BattleStageStaticInfo>(() => new BattleStageStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleStageStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfo(BattleStageStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      leftWidth_ = other.leftWidth_;
      rightWidth_ = other.rightWidth_;
      height_ = other.height_;
      gridIdList_ = other.gridIdList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfo Clone() {
      return new BattleStageStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LeftWidth" field.</summary>
    public const int LeftWidthFieldNumber = 3;
    private int leftWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftWidth {
      get { return leftWidth_; }
      set {
        leftWidth_ = value;
      }
    }

    /// <summary>Field number for the "RightWidth" field.</summary>
    public const int RightWidthFieldNumber = 4;
    private int rightWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RightWidth {
      get { return rightWidth_; }
      set {
        rightWidth_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 5;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "GridIdList" field.</summary>
    public const int GridIdListFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_gridIdList_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> gridIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GridIdList {
      get { return gridIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleStageStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleStageStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (LeftWidth != other.LeftWidth) return false;
      if (RightWidth != other.RightWidth) return false;
      if (Height != other.Height) return false;
      if(!gridIdList_.Equals(other.gridIdList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (LeftWidth != 0) hash ^= LeftWidth.GetHashCode();
      if (RightWidth != 0) hash ^= RightWidth.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= gridIdList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (LeftWidth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftWidth);
      }
      if (RightWidth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RightWidth);
      }
      if (Height != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Height);
      }
      gridIdList_.WriteTo(output, _repeated_gridIdList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LeftWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftWidth);
      }
      if (RightWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightWidth);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      size += gridIdList_.CalculateSize(_repeated_gridIdList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleStageStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.LeftWidth != 0) {
        LeftWidth = other.LeftWidth;
      }
      if (other.RightWidth != 0) {
        RightWidth = other.RightWidth;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      gridIdList_.Add(other.gridIdList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            LeftWidth = input.ReadInt32();
            break;
          }
          case 32: {
            RightWidth = input.ReadInt32();
            break;
          }
          case 40: {
            Height = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            gridIdList_.AddEntriesFrom(input, _repeated_gridIdList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TerrainStaticInfo : pb::IMessage<TerrainStaticInfo> {
    private static readonly pb::MessageParser<TerrainStaticInfo> _parser = new pb::MessageParser<TerrainStaticInfo>(() => new TerrainStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TerrainStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerrainStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerrainStaticInfo(TerrainStaticInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      walkSpeed_ = other.walkSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerrainStaticInfo Clone() {
      return new TerrainStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WalkSpeed" field.</summary>
    public const int WalkSpeedFieldNumber = 3;
    private int walkSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WalkSpeed {
      get { return walkSpeed_; }
      set {
        walkSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TerrainStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TerrainStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (WalkSpeed != other.WalkSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (WalkSpeed != 0) hash ^= WalkSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (WalkSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WalkSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (WalkSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WalkSpeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TerrainStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.WalkSpeed != 0) {
        WalkSpeed = other.WalkSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            WalkSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityStaticInfo : pb::IMessage<EntityStaticInfo> {
    private static readonly pb::MessageParser<EntityStaticInfo> _parser = new pb::MessageParser<EntityStaticInfo>(() => new EntityStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfo(EntityStaticInfo other) : this() {
      id_ = other.id_;
      entityType_ = other.entityType_;
      specificId_ = other.specificId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfo Clone() {
      return new EntityStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "EntityType" field.</summary>
    public const int EntityTypeFieldNumber = 2;
    private global::MonMoose.StaticData.EEntityType entityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MonMoose.StaticData.EEntityType EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    /// <summary>Field number for the "SpecificId" field.</summary>
    public const int SpecificIdFieldNumber = 3;
    private int specificId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecificId {
      get { return specificId_; }
      set {
        specificId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EntityType != other.EntityType) return false;
      if (SpecificId != other.SpecificId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EntityType != 0) hash ^= EntityType.GetHashCode();
      if (SpecificId != 0) hash ^= SpecificId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EntityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EntityType);
      }
      if (SpecificId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpecificId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EntityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityType);
      }
      if (SpecificId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecificId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EntityType != 0) {
        EntityType = other.EntityType;
      }
      if (other.SpecificId != 0) {
        SpecificId = other.SpecificId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            entityType_ = (global::MonMoose.StaticData.EEntityType) input.ReadEnum();
            break;
          }
          case 24: {
            SpecificId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrefabPathStaticInfo : pb::IMessage<PrefabPathStaticInfo> {
    private static readonly pb::MessageParser<PrefabPathStaticInfo> _parser = new pb::MessageParser<PrefabPathStaticInfo>(() => new PrefabPathStaticInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrefabPathStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfo(PrefabPathStaticInfo other) : this() {
      id_ = other.id_;
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfo Clone() {
      return new PrefabPathStaticInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrefabPathStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrefabPathStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrefabPathStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActorStaticInfoList : pb::IMessage<ActorStaticInfoList> {
    private static readonly pb::MessageParser<ActorStaticInfoList> _parser = new pb::MessageParser<ActorStaticInfoList>(() => new ActorStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfoList(ActorStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorStaticInfoList Clone() {
      return new ActorStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.ActorStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.ActorStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.ActorStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.ActorStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.ActorStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttributeStaticInfoList : pb::IMessage<AttributeStaticInfoList> {
    private static readonly pb::MessageParser<AttributeStaticInfoList> _parser = new pb::MessageParser<AttributeStaticInfoList>(() => new AttributeStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfoList(AttributeStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeStaticInfoList Clone() {
      return new AttributeStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.AttributeStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.AttributeStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.AttributeStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.AttributeStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.AttributeStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleSceneStaticInfoList : pb::IMessage<BattleSceneStaticInfoList> {
    private static readonly pb::MessageParser<BattleSceneStaticInfoList> _parser = new pb::MessageParser<BattleSceneStaticInfoList>(() => new BattleSceneStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleSceneStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfoList(BattleSceneStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSceneStaticInfoList Clone() {
      return new BattleSceneStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.BattleSceneStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.BattleSceneStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.BattleSceneStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.BattleSceneStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.BattleSceneStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleSceneStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleSceneStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleSceneStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleStageStaticInfoList : pb::IMessage<BattleStageStaticInfoList> {
    private static readonly pb::MessageParser<BattleStageStaticInfoList> _parser = new pb::MessageParser<BattleStageStaticInfoList>(() => new BattleStageStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleStageStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfoList(BattleStageStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStageStaticInfoList Clone() {
      return new BattleStageStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.BattleStageStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.BattleStageStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.BattleStageStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.BattleStageStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.BattleStageStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleStageStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleStageStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleStageStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TerrainStaticInfoList : pb::IMessage<TerrainStaticInfoList> {
    private static readonly pb::MessageParser<TerrainStaticInfoList> _parser = new pb::MessageParser<TerrainStaticInfoList>(() => new TerrainStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TerrainStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerrainStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerrainStaticInfoList(TerrainStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerrainStaticInfoList Clone() {
      return new TerrainStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.TerrainStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.TerrainStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.TerrainStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.TerrainStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.TerrainStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TerrainStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TerrainStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TerrainStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityStaticInfoList : pb::IMessage<EntityStaticInfoList> {
    private static readonly pb::MessageParser<EntityStaticInfoList> _parser = new pb::MessageParser<EntityStaticInfoList>(() => new EntityStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfoList(EntityStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStaticInfoList Clone() {
      return new EntityStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.EntityStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.EntityStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.EntityStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.EntityStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.EntityStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrefabPathStaticInfoList : pb::IMessage<PrefabPathStaticInfoList> {
    private static readonly pb::MessageParser<PrefabPathStaticInfoList> _parser = new pb::MessageParser<PrefabPathStaticInfoList>(() => new PrefabPathStaticInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrefabPathStaticInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MonMoose.StaticData.StructureReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfoList(PrefabPathStaticInfoList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrefabPathStaticInfoList Clone() {
      return new PrefabPathStaticInfoList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MonMoose.StaticData.PrefabPathStaticInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MonMoose.StaticData.PrefabPathStaticInfo.Parser);
    private readonly pbc::RepeatedField<global::MonMoose.StaticData.PrefabPathStaticInfo> list_ = new pbc::RepeatedField<global::MonMoose.StaticData.PrefabPathStaticInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MonMoose.StaticData.PrefabPathStaticInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrefabPathStaticInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrefabPathStaticInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrefabPathStaticInfoList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
